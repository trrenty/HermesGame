damageHeadsUp=Watch out! The [GOLD]spikes[WHITE] ahead, as well as the [GOLD]enemies [WHITE]that you'll encounter will [GOLD]damage [WHITE]you! Try to avoid touching them!
interact=Press [GOLD]{0} to interact!
introInfo=Greetings, adventurer! This is where Hermeses and your adventure begins! Help Hermes escape the depths of hell while learning about the wonders of concurrency in Java!
loading=Loading...
npc0dialogue0=Hello, friend. You seem oddly fleshy for one of our kind. 
npc0dialogue1=Perhaps you'll find it more pleasurable further above. Sadly, the exit is blocked.
npc0dialogue2=I could help you, but I need to find hat first! I can't be going out in the public without looking good!
newTask=[GOLD]New Task added!
findExit=Find a way to clear the exit!
helpTheLoon=Find Loon's lost hat
pickUp=Press [GOLD]{0} to pickup!
newItem=New Item Collected!
npc0dialogue3=You found my hat!! Thanks pal! I'll see you at the exit, if you ever wanna gett out!
taskDone=Task completed!
reset=Reset the {0}?
boulder=boulder
theThing=thing
npc1dialogue0=You saved us! Thank you so much!
npc1dialogue1=We are in your debt! If you need our help, just let us know!
npc1dialogue2=Need help moving that rock? See you there, then!
npc2dialogue0=I'm so scared! Someone help me!
npc2dialogue1=Please, someone!! Help me..
npc2dialogue2=I'm finally saved! Thank you! 
npc2dialogue3=That bully won't bother me anymore! Because she's a dead bitch!...dead DEAD! 
npc2dialogue4=Sure I'll help you get out! See you there!
enemyHeadsUp=Watch out for the enemies ahead!
npc0dialogue4=You finally here? Seems you've gathered friends! Just give us the signal and we'll push!
ready=Ready?
npc0dialogue5=Rock too big, man. Need more power :/
npc0dialogue6=We go!
npc0dialogue7=
locks0=The following contraption will display how we can bestow upon an object a single owner using locks.
locks1=In this example, we will be using 3 locks. One to repesent Hermes, one to represent\
 any other obstacle that can sit on the rock, and one to represent the door's state. ie open/closed\
\nReentrantLock [VAR]sharedLock[NR];\
\nReentrantLock [VAR]playerLock[NR];\
\nReentrantLock [VAR]rockLock[NR];
threadCountDown=[GREEN]"CountDown" called by {0}
threadAwait=[GREEN]{0} is awaiting!
threadBarrierUp=Barrier up!
threadLockTried={0} tried the lock!
threadLockAcquired={0} acquired the lock!
locks2=When Hermes or some rock touch the plate, the lock of that object (Hermes/rock) \
will be locked by the main thread.\
\n[VAR]playerLock[NR].lock(); / [VAR]rockLock[NR].lock();\
\n[WH]This will let the objects pass through and try to acquire the door's lock.\
\n[KW]if [NR](![VAR]ownLock[NR].tryLock()) \
\n[VAR]sharedLock.[NR]lockInterruptibly();\
\n[WH]If the door's lock is acquired by any thread, the door shall open\
respawn=Press any key to respawn
respawn=Press any key to respawn
locks3=If an object tries to acquire the shared lock but it is locked already, it will await \
until the other object leaves the rock or it is intrerrupted by a signal sent by the main thread that. \
This signal will mean that the object left the plate. \n\
[VAR]objectLock[NR].unlock(); \n\
[KW]if [NR]([VAR]sharedLock[NR].hasQueuedThread([VAR]objectThread[NR])) \n\
[VAR]objectLock[NR].interrupt(); \n\
                
threadCountDown0=CountDownLatch is a tool that enables the developer to make a set of threads await at a common barrier \
that will go up when a set number of threads are awaiting to it. It is most commonly used to sync the \
start of a number of threads or to make each the execution of all the other threads.
threadCountDown1=We will exploring the first situation in which a set number of threads will await each other before \
starting their execution. Its functionality will be displayed using the characters - Loon, They, Mini, Hermes - \
each will represent an underlying thread.
threadCountDown2=Each character/thread is busy doing it's own thing. They will eventually get to the barrier and await \
the arrival of the others. You need to break their routines so they can go to the barrier.\
 When a thread will await at the barrier, you will be notified in the down-right corner of the screen.
grump0=Ugh..you die and not even in hell can you get rid of pesky twats like you...can't you see I'm busy?\
Go bother someone else!
grump1=You're so thickheaded that you can't even get my words through your head?! How about you fuck off?!
grump2=Ok. Maybe I've been too harsh. Could you please consider unexisting from this place?
grump3=You're clearly as dumb as you look...
grump4=...
grump5=......
grump6=*If I ignore him, he will surely go away*
grump7=Please..GOD. Hear my prayer!! Get this asshole out of here!!!
grump8=Dude...
grump9=I'm gonna pay you 1 health potion to fuck off! Whachu say?
yesOrNo=Press [GOLD]Y[WH] for YES or [GOLD]N [WH]for NO
fuckYou=FUCK YOU!
threadPhaser=public void run() {{\n\
|   while (!phaser.isTerminated()) {{\n\
|      phaser.awaitAdvance(phaser.getPhase());\n\
|      for (Runnable runnable : runnables) {{\n\
|           runnable.run();\n\
|      }\n\
|   }\n\
}
charon0=*Sigh* Another one coming..
charon1=Gimme the coins and lets go..
charon2=You ain't got them? No coins, no passage. Why? That's the law, thats why.
charon3=Maybe you'll find some in the ruins above. Hasty now! I don't have all day.
charon4=What are you wasting time for? Fuck off
charon5=That's only one. Want me to get you half way there and throw you into the river?
charon6=Finally! Gimme those and lets go.
taskCoinsTimer=Find the coins before the timer expires! {0}:{1}
bully0=You're aproaching me again? Can't a gentleman lick his wounds peacefully?
bully1=I do apologise for assaulting you. It was not my intend. My quarrel with THAT LITTLE PRICK...I mean\
...with that guy got the best of me..
bully2=While I do apologise for that. I now have violent fantasies about you for your intervention.
bully3=I wish upon your well being unless you present a good indicative on why we shouldn't have a bloody afternoon.
bully4="Here's your reason" (give coin) - [GOLD]1[WH]\n\
"Sry :( " - [GOLD]2[WH]\n\
"Fuk u" - [GOLD]3[WH]
bully5=Ah...a token of good will. May our paths intertwine again, my friend.
bully6=Understandable. Have a nice day!
bully7=So you have chosen...DEATH.
locksGeneral0=Since every game has it's logic run in a loop, we would also need the Threads logic to do so.\
To achieve this and avoid each thread to loop unnecessarily, we can make use of the [GOLD]PHASER[WH] utility.
locksGeneral1=The code above displays the underlying logic for each Thread. Each instance has access to the following objects:\n\
[NR]Phaser [VAR]phaser \n\
[NR]Array<Runnable> [VAR]runnables \n\
[WH]Using these, we can assure that the logic, which can be extended by addind additional Runnables, loops only when necessary.\
And when we need it to loop, we call\n\
[VAR]phaser[NR].arriveAndAwaitAdvance();
locksGeneralLabel=
threadLockRock0=Underlying the rock, but also the player, we have a Thread that will work with an associated Runnable. As mentioned \
previously, the runnable will need access to two locks - one representing itself and one the shared object
threadLockRock1=The two threads will be activated using the phaser each time the character will touch the plate inside the game, or the rock will be over it.\
Their locks will be locked in the moment they touch the plate. Thus, they should be able to acquire the shared lock.
threadLockRock2=When they try to acquire the shared lock, they will try it interruptibly. Doing so, if the object leaves the plate, it will interrupt,\
and if the other one does so, it will acquire it as soon as that happens
threadLockCode=public void run() {{\n\
|    if (ownLock.tryLock()) {{\n\
|    |    if (sharedLock.isHeldByCurrentThread()) {{\n\
|    |    |    sharedLock.unlock();\n\
|    |    }\n\
|    |    ownLock.unlock();\n\
|    } else {{\n\
|        try {{\n\
|            if (!sharedLock.isHeldByCurrentThread()) {{\n\
|            |    sharedLock.lockInterruptibly();\n\
|            }\n\
|        } catch (InterruptedException ignored) {{\n\
|        }\n\
|    }\n\
}
threadLockPlatform0=Platforma, sau mai bine zis placa pe care tot apasă obiectele din lume, este obiectul asociat lacătului distribuit.\
Starea acestuia poate fi doar închuiat, stare în care platforma se va deschide, sau dezchuiat, caz în care platforma\
 se va închide dacă nu este deja.
threadLockSharedCode=if (sharedLock.isLocked()) {{\n\
|    log.debug("opening door");\n\
|    isOpen = true;\n\
} else {{\n\
|    log.debug("closing door");\n\
|    isOpen = false;\n\
}
threadCountDownMini0=Now that you helped the Mini. He is able to help you. He called [GOLD]countdown [WH] signaling that he is done doing his own business and \
now he is [GOLD]awaiting [WH]for all the other ghosts/threads to be ready.